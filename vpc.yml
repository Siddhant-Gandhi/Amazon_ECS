AWSTemplateFormatVersion: "2010-09-09"

Description: This template is creating a VPC with 3 private and 3 public subnets.

Parameters:

  VPCName:
    Description: The name of the VPC being created
    Type: String

  VpcCIDR:
    Description: CidrBlock block of the VPC
    Type: String

  PublicSubnetCidrBlocks:
    Description: CidrBlock blocks of the public subnets
    Type: CommaDelimitedList

  PrivateSubnetCidrBlocks:
    Description: CidrBlock blocks of the public subnets
    Type: CommaDelimitedList

  CreateIGW:
    Description: Should be true to create internet gateway and attach to the VPC
    Type: String
    Default: false  

  CreateNatGW:
    Description: Should be true to create nat gateway and attach to the route table
    Type: String
    Default: false

Mappings:
  AZRegions:
    us-east-1:
      AZs: [a, b, c] 

Conditions:
  CreateIGW: !Equals
    - !Ref CreateIGW
    - true   

  CreateNatGW: !Equals
    - !Ref CreateNatGW
    - true        

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - 
          Key: "Name"
          Value: !Ref VPCName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref PublicSubnetCidrBlocks]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      Tags:
        - Key: Name
          Value: !Sub
            - "${VPCName}-${AWS::Region}${AZ}"
            - AZ:
                !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
              VPCName: !Ref VPCName      
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref PublicSubnetCidrBlocks]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      Tags:
        - Key: Name
          Value: !Sub
            - "${VPCName}-${AWS::Region}${AZ}"
            - AZ:
                !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
              VPCName: !Ref VPCName    
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Ref PublicSubnetCidrBlocks]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [2, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      Tags:
        - Key: Name
          Value: !Sub
            - "${VPCName}-${AWS::Region}${AZ}"
            - AZ:
                !Select [2, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
              VPCName: !Ref VPCName    
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref PrivateSubnetCidrBlocks]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      Tags:
        - Key: Name
          Value: !Sub
            - "${VPCName}-${AWS::Region}${AZ}"
            - AZ:
                !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
              VPCName: !Ref VPCName      
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref PrivateSubnetCidrBlocks]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      Tags:
        - Key: Name
          Value: !Sub
            - "${VPCName}-${AWS::Region}${AZ}"
            - AZ:
                !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
              VPCName: !Ref VPCName    
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Ref PrivateSubnetCidrBlocks]
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [2, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      Tags:
        - Key: Name
          Value: !Sub
            - "${VPCName}-${AWS::Region}${AZ}"
            - AZ:
                !Select [2, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
              VPCName: !Ref VPCName  

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${AWS::Region}-public-rt
            - VPCName: !Ref VPCName

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${AWS::Region}-private-rt
            - VPCName: !Ref VPCName  

  RouteTableAssociationPublicSubnet1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable  

  RouteTableAssociationPublicSubnet2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable  

  RouteTableAssociationPublicSubnet3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable  

  RouteTableAssociationPrivateSubnet1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable 

  RouteTableAssociationPrivateSubnet2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable 

  RouteTableAssociationPrivateSubnet3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable 

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Condition: CreateIGW
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${VPCName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: InternetGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
    Condition: CreateIGW

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
    Condition: CreateIGW              

  EIP:
    Type: "AWS::EC2::EIP"
    Condition: CreateNatGW
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: CreateNatGW
    DependsOn: EIP
    Properties:
      AllocationId: !GetAtt "EIP.AllocationId"
      SubnetId: !Ref PublicSubnet1 

  NatGatewayRoute:
    Type: AWS::EC2::Route
    Condition: CreateNatGW
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway    


Outputs:
  PublicSubnetIds1:
    Description: Public Subnet01 in the VPC
    Value: !Ref  PublicSubnet1
    Export:
      Name:  PublicSubnet1
  PublicSubnetIds2:
    Description: Public  Subnet02 in the VPC
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2
  PublicSubnetIds3:
    Description: Public Subnet03 in the VPC
    Value: !Ref PublicSubnet3
    Export:
      Name: PublicSubnet3   
  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
    Export:
      Name: VPC
